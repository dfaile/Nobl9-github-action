name: Automated Versioning

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      dry_run:
        description: 'Dry run (no actual version bump)'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.21'

jobs:
  # Analyze commits and determine version bump
  analyze-commits:
    name: Analyze Commits
    runs-on: ubuntu-latest
    outputs:
      bump_type: ${{ steps.analyze.outputs.bump_type }}
      should_release: ${{ steps.analyze.outputs.should_release }}
      next_version: ${{ steps.version.outputs.next_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install conventional-changelog
        run: npm install -g conventional-changelog-cli
          
      - name: Analyze commit messages
        id: analyze
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
          
          # Analyze commit types
          MAJOR_COUNT=$(echo "$COMMITS" | grep -c "BREAKING CHANGE\|^major:" || echo "0")
          MINOR_COUNT=$(echo "$COMMITS" | grep -c "^feat:" || echo "0")
          PATCH_COUNT=$(echo "$COMMITS" | grep -c "^fix:\|^docs:\|^style:\|^refactor:\|^test:\|^chore:" || echo "0")
          
          echo "Commit analysis:"
          echo "  Major changes: $MAJOR_COUNT"
          echo "  Minor changes: $MINOR_COUNT"
          echo "  Patch changes: $PATCH_COUNT"
          
          # Determine bump type
          if [ "$MAJOR_COUNT" -gt 0 ]; then
            BUMP_TYPE="major"
          elif [ "$MINOR_COUNT" -gt 0 ]; then
            BUMP_TYPE="minor"
          elif [ "$PATCH_COUNT" -gt 0 ]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="none"
          fi
          
          # Check if manual bump type was specified
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Determine if we should release
          if [ "$BUMP_TYPE" != "none" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Calculate next version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(cat version/version.go | grep 'Version =' | sed 's/.*Version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate next version based on bump type
          case "${{ steps.analyze.outputs.bump_type }}" in
            "major")
              NEXT_MAJOR=$((MAJOR + 1))
              NEXT_VERSION="$NEXT_MAJOR.0.0"
              ;;
            "minor")
              NEXT_MINOR=$((MINOR + 1))
              NEXT_VERSION="$MAJOR.$NEXT_MINOR.0"
              ;;
            "patch")
              NEXT_PATCH=$((PATCH + 1))
              NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
              ;;
            *)
              NEXT_VERSION="$CURRENT_VERSION"
              ;;
          esac
          
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

  # Generate changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: needs.analyze-commits.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install conventional-changelog
        run: npm install -g conventional-changelog-cli
          
      - name: Generate changelog
        run: |
          # Generate changelog for next version
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0 > CHANGELOG.tmp
          
          # Add version header
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.tmp >> CHANGELOG.md
          
          # Clean up
          rm CHANGELOG.tmp
          
      - name: Commit changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update changelog" || echo "No changelog changes to commit"
          git push

  # Create version bump PR
  create-version-pr:
    name: Create Version Bump PR
    runs-on: ubuntu-latest
    needs: [analyze-commits, generate-changelog]
    if: needs.analyze-commits.outputs.should_release == 'true' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create version bump branch
        run: |
          BRANCH_NAME="version-bump-v${{ needs.analyze-commits.outputs.next_version }}"
          git checkout -b $BRANCH_NAME
          
      - name: Update version files
        run: |
          VERSION="${{ needs.analyze-commits.outputs.next_version }}"
          
          # Update version.go
          sed -i "s/Version = \".*\"/Version = \"$VERSION\"/" version/version.go
          
          # Update action.yml with new version
          sed -i "s/uses: .*@.*/uses: ghcr.io\/${{ github.repository }}@v$VERSION/" action.yml
          
          # Update Dockerfile labels
          sed -i "s/LABEL version=\".*\"/LABEL version=\"$VERSION\"/" Dockerfile
          
      - name: Commit version changes
        run: |
          VERSION="${{ needs.analyze-commits.outputs.next_version }}"
          BRANCH_NAME="version-bump-v$VERSION"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: bump version to v$VERSION"
          git push origin $BRANCH_NAME
          
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "chore: bump version to v${{ needs.analyze-commits.outputs.next_version }}"
          body: |
            ## Version Bump
            
            This PR bumps the version to **v${{ needs.analyze-commits.outputs.next_version }}**.
            
            ### Changes
            - Updated version in `version/version.go`
            - Updated version in `action.yml`
            - Updated version in `Dockerfile`
            - Updated changelog
            
            ### Bump Type
            **${{ needs.analyze-commits.outputs.bump_type }}** version bump
            
            ### Next Steps
            - [ ] Review changes
            - [ ] Merge PR
            - [ ] Create release tag
            - [ ] Run release workflow
            
            ---
            
            *This PR was automatically created by the versioning workflow.*
          base: main
          delete-branch: true

  # Manual version bump
  manual-version-bump:
    name: Manual Version Bump
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update version files
        run: |
          VERSION="${{ needs.analyze-commits.outputs.next_version }}"
          
          # Update version.go
          sed -i "s/Version = \".*\"/Version = \"$VERSION\"/" version/version.go
          
          # Update action.yml with new version
          sed -i "s/uses: .*@.*/uses: ghcr.io\/${{ github.repository }}@v$VERSION/" action.yml
          
          # Update Dockerfile labels
          sed -i "s/LABEL version=\".*\"/LABEL version=\"$VERSION\"/" Dockerfile
          
      - name: Commit and push changes
        run: |
          VERSION="${{ needs.analyze-commits.outputs.next_version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: bump version to v$VERSION"
          git push
          
      - name: Create and push tag
        run: |
          VERSION="${{ needs.analyze-commits.outputs.next_version }}"
          TAG="v$VERSION"
          
          git tag $TAG
          git push origin $TAG
          
      - name: Notify version bump
        run: |
          echo "âœ… Version bumped to v${{ needs.analyze-commits.outputs.next_version }}"
          echo "Tag: v${{ needs.analyze-commits.outputs.next_version }}"
          echo "This will trigger the release workflow."

  # Version summary
  version-summary:
    name: Version Summary
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: always()
    
    steps:
      - name: Create version summary
        run: |
          echo "# Version Analysis Summary" > version-summary.md
          echo "" >> version-summary.md
          echo "## Analysis Results:" >> version-summary.md
          echo "- **Current Version:** $(cat version/version.go | grep 'Version =' | sed 's/.*Version = "\(.*\)"/\1/')" >> version-summary.md
          echo "- **Bump Type:** ${{ needs.analyze-commits.outputs.bump_type }}" >> version-summary.md
          echo "- **Next Version:** ${{ needs.analyze-commits.outputs.next_version }}" >> version-summary.md
          echo "- **Should Release:** ${{ needs.analyze-commits.outputs.should_release }}" >> version-summary.md
          echo "" >> version-summary.md
          
          if [ "${{ needs.analyze-commits.outputs.should_release }}" = "true" ]; then
            echo "## Next Steps:" >> version-summary.md
            echo "1. Review the version bump" >> version-summary.md
            echo "2. Merge the version bump PR (if created)" >> version-summary.md
            echo "3. Create a release tag: \`v${{ needs.analyze-commits.outputs.next_version }}\`" >> version-summary.md
            echo "4. Run the release workflow" >> version-summary.md
          else
            echo "## No Release Needed:" >> version-summary.md
            echo "No significant changes detected since last release." >> version-summary.md
          fi
          
      - name: Upload version summary
        uses: actions/upload-artifact@v4
        with:
          name: version-summary
          path: version-summary.md
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('version-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            }); 