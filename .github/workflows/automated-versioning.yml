name: Automated Versioning and Changelog Generation

on:
  push:
    branches: [main]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'version/version.go'
      - '.github/workflows/automated-versioning.yml'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
          - none
      force_version:
        description: 'Force specific version (e.g., v1.2.3)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release after versioning'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no actual changes)'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Analyze commits and determine version bump
  analyze-commits:
    name: Analyze Commits and Determine Version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      bump-type: ${{ steps.analyze.outputs.bump-type }}
      next-version: ${{ steps.analyze.outputs.next-version }}
      current-version: ${{ steps.analyze.outputs.current-version }}
      has-changes: ${{ steps.analyze.outputs.has-changes }}
      commit-count: ${{ steps.analyze.outputs.commit-count }}
      conventional-commits: ${{ steps.analyze.outputs.conventional-commits }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install conventional-changelog-cli
        run: |
          npm install -g conventional-changelog-cli@4.2.2
          
      - name: Get current version
        id: current-version
        run: |
          # Extract current version from version.go
          CURRENT_VERSION=$(grep -o 'Version = "[^"]*"' version/version.go | cut -d'"' -f2)
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="v0.0.0"
          fi
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          
      - name: Analyze commits and determine version bump
        id: analyze
        run: |
          # Get the last tag or use initial version
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Get commits since last tag
          COMMITS_SINCE_TAG=$(git log --oneline $LAST_TAG..HEAD --no-merges)
          COMMIT_COUNT=$(echo "$COMMITS_SINCE_TAG" | wc -l)
          
          echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "Commits since last tag: $COMMIT_COUNT"
          
          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "No new commits since last tag"
            echo "bump-type=none" >> $GITHUB_OUTPUT
            echo "next-version=$LAST_TAG" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "conventional-commits=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has-changes=true" >> $GITHUB_OUTPUT
          
          # Check for manual version override
          if [ "${{ github.event.inputs.force_version }}" != "" ]; then
            echo "Using forced version: ${{ github.event.inputs.force_version }}"
            echo "bump-type=manual" >> $GITHUB_OUTPUT
            echo "next-version=${{ github.event.inputs.force_version }}" >> $GITHUB_OUTPUT
            echo "conventional-commits=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for manual bump type
          if [ "${{ github.event.inputs.version_bump }}" != "auto" ] && [ "${{ github.event.inputs.version_bump }}" != "" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
            echo "Using manual bump type: $BUMP_TYPE"
          else
            # Analyze conventional commits to determine bump type
            MAJOR_COUNT=0
            MINOR_COUNT=0
            PATCH_COUNT=0
            
            # Count conventional commit types
            while IFS= read -r commit; do
              if [ -n "$commit" ]; then
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                
                # Check for breaking changes
                if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE\|!:"; then
                  MAJOR_COUNT=$((MAJOR_COUNT + 1))
                elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
                  MINOR_COUNT=$((MINOR_COUNT + 1))
                elif echo "$COMMIT_MSG" | grep -q "^fix:\|^docs:\|^style:\|^refactor:\|^perf:\|^test:\|^chore:"; then
                  PATCH_COUNT=$((PATCH_COUNT + 1))
                fi
              fi
            done <<< "$COMMITS_SINCE_TAG"
            
            echo "Conventional commit analysis:"
            echo "  Major (breaking): $MAJOR_COUNT"
            echo "  Minor (features): $MINOR_COUNT"
            echo "  Patch (fixes): $PATCH_COUNT"
            
            # Determine bump type based on conventional commits
            if [ $MAJOR_COUNT -gt 0 ]; then
              BUMP_TYPE="major"
            elif [ $MINOR_COUNT -gt 0 ]; then
              BUMP_TYPE="minor"
            elif [ $PATCH_COUNT -gt 0 ]; then
              BUMP_TYPE="patch"
            else
              BUMP_TYPE="none"
            fi
          fi
          
          echo "conventional-commits=$((MAJOR_COUNT + MINOR_COUNT + PATCH_COUNT))" >> $GITHUB_OUTPUT
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate next version
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          CURRENT_VERSION=${CURRENT_VERSION#v}  # Remove 'v' prefix
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            "none")
              echo "No version bump needed"
              ;;
          esac
          
          NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version analysis complete:"
          echo "  Current version: $CURRENT_VERSION"
          echo "  Bump type: $BUMP_TYPE"
          echo "  Next version: $NEXT_VERSION"

  # Generate changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: needs.analyze-commits.outputs.has-changes == 'true' && needs.analyze-commits.outputs.bump-type != 'none'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install conventional-changelog-cli
        run: |
          npm install -g conventional-changelog-cli@4.2.2
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
      - name: Generate changelog
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Generate changelog for the new version
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          # Add version header if not present
          if ! grep -q "## \[${{ needs.analyze-commits.outputs.next-version }}" CHANGELOG.md; then
            # Insert version header after the main header
            sed -i "3a\\n## [${{ needs.analyze-commits.outputs.next-version }}] - $(date +%Y-%m-%d)" CHANGELOG.md
          fi
          
          echo "Changelog generated successfully"
          
      - name: Preview changelog
        run: |
          echo "## Generated Changelog Preview"
          echo ""
          echo "### Version: ${{ needs.analyze-commits.outputs.next-version }}"
          echo "### Bump Type: ${{ needs.analyze-commits.outputs.bump-type }}"
          echo "### Commit Count: ${{ needs.analyze-commits.outputs.commit-count }}"
          echo ""
          echo "**Changelog Content:**"
          echo "```markdown"
          head -50 CHANGELOG.md
          echo "```"
          
      - name: Commit changelog (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "DRY RUN: Would commit changelog changes"
          git diff CHANGELOG.md || echo "No changes to commit"
          
      - name: Commit changelog
        if: github.event.inputs.dry_run != 'true'
        run: |
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update changelog for ${{ needs.analyze-commits.outputs.next-version }}"
            git push origin main
          fi

  # Update version in code
  update-version:
    name: Update Version in Code
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: needs.analyze-commits.outputs.has-changes == 'true' && needs.analyze-commits.outputs.bump-type != 'none'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Update version in version.go
        run: |
          # Update version in version/version.go
          sed -i "s/Version = \"[^\"]*\"/Version = \"${{ needs.analyze-commits.outputs.next-version }}\"/" version/version.go
          
          echo "Updated version to ${{ needs.analyze-commits.outputs.next-version }} in version/version.go"
          
      - name: Update version in action.yml
        run: |
          # Update version in action.yml if it exists
          if [ -f "action.yml" ]; then
            sed -i "s/uses: .*@[^[:space:]]*/uses: .*@${{ needs.analyze-commits.outputs.next-version }}/" action.yml
            echo "Updated version in action.yml"
          fi
          
      - name: Update version in Dockerfile
        run: |
          # Update version in Dockerfile if it exists
          if [ -f "Dockerfile" ]; then
            sed -i "s/LABEL version=\"[^\"]*\"/LABEL version=\"${{ needs.analyze-commits.outputs.next-version }}\"/" Dockerfile
            echo "Updated version in Dockerfile"
          fi
          
      - name: Verify version updates
        run: |
          echo "Verifying version updates..."
          
          # Check version.go
          VERSION_IN_CODE=$(grep -o 'Version = "[^"]*"' version/version.go | cut -d'"' -f2)
          if [ "$VERSION_IN_CODE" = "${{ needs.analyze-commits.outputs.next-version }}" ]; then
            echo "✅ Version updated in version.go"
          else
            echo "❌ Version not updated in version.go"
            exit 1
          fi
          
          # Check action.yml if it exists
          if [ -f "action.yml" ]; then
            if grep -q "${{ needs.analyze-commits.outputs.next-version }}" action.yml; then
              echo "✅ Version updated in action.yml"
            else
              echo "❌ Version not updated in action.yml"
              exit 1
            fi
          fi
          
          echo "All version updates verified successfully"
          
      - name: Commit version updates (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "DRY RUN: Would commit version updates"
          git diff || echo "No changes to commit"
          
      - name: Commit version updates
        if: github.event.inputs.dry_run != 'true'
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump version to ${{ needs.analyze-commits.outputs.next-version }}"
            git push origin main
          fi

  # Create version tag
  create-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    needs: [analyze-commits, generate-changelog, update-version]
    if: needs.analyze-commits.outputs.has-changes == 'true' && needs.analyze-commits.outputs.bump-type != 'none' && github.event.inputs.dry_run != 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
      - name: Create and push tag
        run: |
          # Create annotated tag
          git tag -a "${{ needs.analyze-commits.outputs.next-version }}" -m "Release ${{ needs.analyze-commits.outputs.next-version }}"
          
          # Push tag
          git push origin "${{ needs.analyze-commits.outputs.next-version }}"
          
          echo "Created and pushed tag: ${{ needs.analyze-commits.outputs.next-version }}"

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [analyze-commits, generate-changelog, update-version, create-tag]
    if: needs.analyze-commits.outputs.has-changes == 'true' && needs.analyze-commits.outputs.bump-type != 'none' && (github.event.inputs.create_release == 'true' || github.event.inputs.dry_run != 'true')
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Build binaries
        run: |
          # Build multi-platform binaries
          GOOS=linux GOARCH=amd64 go build -o nobl9-action-linux-amd64 ./cmd/main.go
          GOOS=linux GOARCH=arm64 go build -o nobl9-action-linux-arm64 ./cmd/main.go
          GOOS=darwin GOARCH=amd64 go build -o nobl9-action-darwin-amd64 ./cmd/main.go
          GOOS=darwin GOARCH=arm64 go build -o nobl9-action-darwin-arm64 ./cmd/main.go
          GOOS=windows GOARCH=amd64 go build -o nobl9-action-windows-amd64.exe ./cmd/main.go
          
      - name: Extract release notes
        id: release-notes
        run: |
          # Extract release notes from CHANGELOG.md
          VERSION="${{ needs.analyze-commits.outputs.next-version }}"
          
          # Find the section for this version
          START_LINE=$(grep -n "## \[$VERSION\]" CHANGELOG.md | cut -d: -f1)
          if [ -n "$START_LINE" ]; then
            # Find the next version section or end of file
            NEXT_LINE=$(tail -n +$((START_LINE + 1)) CHANGELOG.md | grep -n "## \[v" | head -1 | cut -d: -f1)
            if [ -n "$NEXT_LINE" ]; then
              END_LINE=$((START_LINE + NEXT_LINE))
            else
              END_LINE=$(wc -l < CHANGELOG.md)
            fi
            
            # Extract the release notes
            RELEASE_NOTES=$(sed -n "${START_LINE},${END_LINE}p" CHANGELOG.md)
          else
            RELEASE_NOTES="Release $VERSION"
          fi
          
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub release (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "DRY RUN: Would create GitHub release"
          echo "Version: ${{ needs.analyze-commits.outputs.next-version }}"
          echo "Release Notes:"
          echo "${{ steps.release-notes.outputs.release-notes }}"
          
      - name: Create GitHub release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.analyze-commits.outputs.next-version }}
          name: Release ${{ needs.analyze-commits.outputs.next-version }}
          body: ${{ steps.release-notes.outputs.release-notes }}
          draft: false
          prerelease: false
          files: |
            nobl9-action-linux-amd64
            nobl9-action-linux-arm64
            nobl9-action-darwin-amd64
            nobl9-action-darwin-arm64
            nobl9-action-windows-amd64.exe

  # Generate version summary report
  version-summary:
    name: Generate Version Summary
    runs-on: ubuntu-latest
    needs: [analyze-commits, generate-changelog, update-version, create-tag, create-release]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Generate version summary report
        run: |
          echo "# Automated Versioning Summary" > version-summary.md
          echo "" >> version-summary.md
          echo "## Version Analysis" >> version-summary.md
          echo "- **Current Version**: ${{ needs.analyze-commits.outputs.current-version }}" >> version-summary.md
          echo "- **Next Version**: ${{ needs.analyze-commits.outputs.next-version }}" >> version-summary.md
          echo "- **Bump Type**: ${{ needs.analyze-commits.outputs.bump-type }}" >> version-summary.md
          echo "- **Has Changes**: ${{ needs.analyze-commits.outputs.has-changes }}" >> version-summary.md
          echo "- **Commit Count**: ${{ needs.analyze-commits.outputs.commit-count }}" >> version-summary.md
          echo "- **Conventional Commits**: ${{ needs.analyze-commits.outputs.conventional-commits }}" >> version-summary.md
          echo "" >> version-summary.md
          
          echo "## Job Results" >> version-summary.md
          echo "- **Analyze Commits**: ${{ needs.analyze-commits.result }}" >> version-summary.md
          echo "- **Generate Changelog**: ${{ needs.generate-changelog.result }}" >> version-summary.md
          echo "- **Update Version**: ${{ needs.update-version.result }}" >> version-summary.md
          echo "- **Create Tag**: ${{ needs.create-tag.result }}" >> version-summary.md
          echo "- **Create Release**: ${{ needs.create-release.result }}" >> version-summary.md
          echo "" >> version-summary.md
          
          if [ "${{ needs.analyze-commits.outputs.bump-type }}" = "none" ]; then
            echo "## Result: No Version Bump Needed" >> version-summary.md
            echo "No changes detected that require a version bump." >> version-summary.md
          elif [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "## Result: Dry Run Completed" >> version-summary.md
            echo "Version bump would be: ${{ needs.analyze-commits.outputs.bump-type }}" >> version-summary.md
            echo "Next version would be: ${{ needs.analyze-commits.outputs.next-version }}" >> version-summary.md
          else
            echo "## Result: Version Updated Successfully" >> version-summary.md
            echo "✅ Version bumped to: ${{ needs.analyze-commits.outputs.next-version }}" >> version-summary.md
            echo "✅ Changelog updated" >> version-summary.md
            echo "✅ Code version updated" >> version-summary.md
            echo "✅ Git tag created" >> version-summary.md
            if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
              echo "✅ GitHub release created" >> version-summary.md
            fi
          fi
          
          echo "" >> version-summary.md
          echo "## Conventional Commit Analysis" >> version-summary.md
          echo "This workflow analyzes commit messages to determine the appropriate version bump:" >> version-summary.md
          echo "- **Major (breaking)**: Commits with 'BREAKING CHANGE' or '!:'" >> version-summary.md
          echo "- **Minor (features)**: Commits starting with 'feat:'" >> version-summary.md
          echo "- **Patch (fixes)**: Commits starting with 'fix:', 'docs:', 'style:', 'refactor:', 'perf:', 'test:', 'chore:'" >> version-summary.md
          
      - name: Upload version summary
        uses: actions/upload-artifact@v4
        with:
          name: version-summary
          path: version-summary.md
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('version-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
