name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  # CodeQL security analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['go']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Go vulnerability check
        run: |
          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Run vulnerability check
          govulncheck ./... > govulncheck-results.txt || echo "Vulnerability check completed"
          
      - name: Upload Go vulnerability results
        uses: actions/upload-artifact@v4
        with:
          name: govulncheck-results
          path: govulncheck-results.txt
          retention-days: 30

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t nobl9-action:security-scan .
          
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nobl9-action:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: HEAD
          head: HEAD
          extra_args: --only-verified --fail
          
      - name: Run GitGuardian secret scanner
        uses: gitguardian/ggshield-action@main
        with:
          mode: scan
          exit-zero: true
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose --redact

  # Dependency management and updates
  dependency-management:
    name: Dependency Management
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Check for outdated dependencies
        run: |
          # Install go-mod-outdated
          go install github.com/psampaz/go-mod-outdated@latest
          
          # Check for outdated dependencies
          go list -u -m all | go-mod-outdated -update -direct || echo "Dependency check completed"
          
      - name: Verify module integrity
        run: |
          go mod download
          go mod verify
          go mod tidy
          
      - name: Check for license compliance
        run: |
          # Install go-licenses
          go install github.com/google/go-licenses@latest
          
          # Check licenses
          go-licenses check ./... || echo "License check completed"
          
      - name: Generate dependency report
        run: |
          echo "# Dependency Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "## Go Modules" >> dependency-report.md
          echo "" >> dependency-report.md
          go list -m all >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## Direct Dependencies" >> dependency-report.md
          echo "" >> dependency-report.md
          go list -m -u all | grep -v indirect >> dependency-report.md
          
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.md
          retention-days: 30

  # Security policy compliance
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check security policy
        run: |
          # Check for SECURITY.md
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file is missing"
            exit 1
          else
            echo "✅ SECURITY.md file exists"
          fi
          
          # Check for security policy
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "⚠️  .github/SECURITY.md file is missing (recommended)"
          else
            echo "✅ .github/SECURITY.md file exists"
          fi
          
      - name: Check for security advisories
        run: |
          # Check for security advisories in the repository
          echo "Checking for security advisories..."
          
      - name: Validate security headers
        run: |
          # Check for security-related headers in documentation
          echo "Validating security headers..."
          
      - name: Check for security best practices
        run: |
          echo "# Security Best Practices Check" > security-compliance-report.md
          echo "" >> security-compliance-report.md
          
          # Check for security-related files
          echo "## Security Files:" >> security-compliance-report.md
          if [ -f "SECURITY.md" ]; then
            echo "- ✅ SECURITY.md exists" >> security-compliance-report.md
          else
            echo "- ❌ SECURITY.md missing" >> security-compliance-report.md
          fi
          
          if [ -f ".github/SECURITY.md" ]; then
            echo "- ✅ .github/SECURITY.md exists" >> security-compliance-report.md
          else
            echo "- ⚠️  .github/SECURITY.md missing (recommended)" >> security-compliance-report.md
          fi
          
          if [ -f ".github/workflows/security-scan.yml" ]; then
            echo "- ✅ Security scanning workflow exists" >> security-compliance-report.md
          else
            echo "- ❌ Security scanning workflow missing" >> security-compliance-report.md
          fi
          
          echo "" >> security-compliance-report.md
          echo "## Recommendations:" >> security-compliance-report.md
          echo "- Enable Dependabot alerts" >> security-compliance-report.md
          echo "- Enable CodeQL analysis" >> security-compliance-report.md
          echo "- Enable secret scanning" >> security-compliance-report.md
          echo "- Regular dependency updates" >> security-compliance-report.md
          
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-compliance-report.md
          retention-days: 30

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan, dependency-management, security-compliance]
    if: always()
    
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
          
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results:" >> security-summary.md
          echo "" >> security-summary.md
          echo "### CodeQL Analysis" >> security-summary.md
          echo "- Status: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- Language: Go" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Dependency Vulnerability Scan" >> security-summary.md
          echo "- Status: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Scanner: Trivy + govulncheck" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Container Security Scan" >> security-summary.md
          echo "- Status: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- Scanner: Trivy" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Secret Scanning" >> security-summary.md
          echo "- Status: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Scanners: TruffleHog, GitGuardian, Gitleaks" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Dependency Management" >> security-summary.md
          echo "- Status: ${{ needs.dependency-management.result }}" >> security-summary.md
          echo "- Checks: Outdated deps, module integrity, licenses" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Security Compliance" >> security-summary.md
          echo "- Status: ${{ needs.security-compliance.result }}" >> security-summary.md
          echo "- Checks: Security policy, best practices" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check for any failures
          FAILED_JOBS=""
          for job in codeql-analysis dependency-scan container-scan secret-scan dependency-management security-compliance; do
            if [ "${{ needs.$job.result }}" = "failure" ]; then
              FAILED_JOBS="$FAILED_JOBS $job"
            fi
          done
          
          if [ -n "$FAILED_JOBS" ]; then
            echo "## ⚠️  Security Issues Detected:" >> security-summary.md
            echo "The following security scans failed: $FAILED_JOBS" >> security-summary.md
            echo "" >> security-summary.md
            echo "Please review the scan results and address any security issues." >> security-summary.md
          else
            echo "## ✅ All Security Scans Passed!" >> security-summary.md
            echo "No critical security issues were detected." >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps:" >> security-summary.md
          echo "1. Review detailed scan results in the Security tab" >> security-summary.md
          echo "2. Address any identified vulnerabilities" >> security-summary.md
          echo "3. Update dependencies if needed" >> security-summary.md
          echo "4. Enable automated security alerts" >> security-summary.md
          
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            }); 