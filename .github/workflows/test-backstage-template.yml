name: Test Backstage Template Environment

on:
  push:
    branches: [main, develop]
    paths:
      - 'template/**'
      - '.github/workflows/test-backstage-template.yml'
  pull_request:
    branches: [main]
    paths:
      - 'template/**'
      - '.github/workflows/test-backstage-template.yml'
  workflow_dispatch:
    inputs:
      backstage_version:
        description: 'Backstage version to test with'
        required: false
        default: '1.25.0'
        type: string
      test_scenarios:
        description: 'Test scenarios to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - advanced
          - edge-cases
      dry_run_only:
        description: 'Run only dry-run tests'
        required: false
        default: true
        type: boolean

env:
  BACKSTAGE_VERSION: '1.25.0'
  NODE_VERSION: '18'
  TEST_TIMEOUT: '45m'

jobs:
  # Set up Backstage test environment
  setup-backstage:
    name: Setup Backstage Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      backstage-url: ${{ steps.setup.outputs.backstage-url }}
      backstage-version: ${{ steps.setup.outputs.backstage-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ github.event.inputs.backstage_version || env.BACKSTAGE_VERSION }}
          
      - name: Create test Backstage app
        id: setup
        run: |
          # Create a new Backstage app for testing
          echo "Creating test Backstage app..."
          npx @backstage/create-app@latest test-backstage-app --yes
          cd test-backstage-app
          
          # Install dependencies
          npm install
          
          # Copy our template to the test app
          cp -r ../template plugins/
          
          # Create test configuration
          cat > app-config.test.yaml << EOF
          app:
            title: Test Backstage App
            baseUrl: http://localhost:3000
            
          backend:
            baseUrl: http://localhost:7007
            listen:
              port: 7007
              host: 0.0.0.0
              
          scaffolder:
            templates:
              - $file: ./plugins/template/template.yaml
              
          integrations:
            github:
              - host: github.com
                token: ${{ secrets.GITHUB_TOKEN }}
                
          # Test-specific configuration
          test:
            enabled: true
            dryRun: true
          EOF
          
          # Update main config to include test config
          echo "include: ['app-config.test.yaml']" >> app-config.yaml
          
          # Get Backstage version
          BACKSTAGE_VERSION=$(npx @backstage/cli --version)
          echo "backstage-version=$BACKSTAGE_VERSION" >> $GITHUB_OUTPUT
          echo "backstage-url=http://localhost:3000" >> $GITHUB_OUTPUT
          
          echo "✅ Backstage test environment created successfully"
          echo "Backstage version: $BACKSTAGE_VERSION"

  # Test template validation in Backstage
  test-template-validation:
    name: Test Template Validation
    runs-on: ubuntu-latest
    needs: [setup-backstage]
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ needs.setup-backstage.outputs.backstage-version }}
          
      - name: Navigate to test app
        run: |
          cd test-backstage-app
          
      - name: Validate template structure
        run: |
          cd test-backstage-app
          
          echo "Validating template structure..."
          
          # Check template file exists
          if [ ! -f "plugins/template/template.yaml" ]; then
            echo "❌ Template file not found"
            exit 1
          fi
          
          # Validate YAML syntax
          yamllint plugins/template/template.yaml
          
          # Check template parameters
          TEMPLATE_PARAMS=$(yq eval '.parameters.properties' plugins/template/template.yaml)
          if [ -z "$TEMPLATE_PARAMS" ]; then
            echo "❌ No template parameters found"
            exit 1
          fi
          
          echo "✅ Template structure validation passed"
          
      - name: Test template parameter validation
        run: |
          cd test-backstage-app
          
          echo "Testing template parameter validation..."
          
          # Test required parameters
          REQUIRED_PARAMS=("projectName" "projectDescription" "projectOwner")
          for param in "${REQUIRED_PARAMS[@]}"; do
            if yq eval ".parameters.properties.$param" plugins/template/template.yaml > /dev/null 2>&1; then
              echo "✅ Required parameter '$param' found"
            else
              echo "❌ Required parameter '$param' missing"
              exit 1
            fi
          done
          
          # Test parameter validation rules
          PROJECT_NAME_VALIDATION=$(yq eval '.parameters.properties.projectName.pattern' plugins/template/template.yaml)
          if [ "$PROJECT_NAME_VALIDATION" != "null" ]; then
            echo "✅ Project name validation pattern found"
          else
            echo "⚠️  Project name validation pattern missing"
          fi
          
          echo "✅ Template parameter validation passed"

  # Test template generation with various scenarios
  test-template-scenarios:
    name: Test Template Scenarios
    runs-on: ubuntu-latest
    needs: [setup-backstage]
    timeout-minutes: 30
    strategy:
      matrix:
        scenario:
          - basic
          - advanced
          - edge-cases
          - invalid-inputs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ needs.setup-backstage.outputs.backstage-version }}
          
      - name: Navigate to test app
        run: |
          cd test-backstage-app
          
      - name: Create test parameters for ${{ matrix.scenario }}
        run: |
          cd test-backstage-app
          
          case "${{ matrix.scenario }}" in
            "basic")
              cat > test-params-${{ matrix.scenario }}.json << EOF
              {
                "projectName": "test-project",
                "projectDescription": "Test project for validation",
                "projectOwner": "test@example.com",
                "projectTeam": "test-team",
                "projectEnvironment": "production"
              }
              EOF
              ;;
            "advanced")
              cat > test-params-${{ matrix.scenario }}.json << EOF
              {
                "projectName": "advanced-test-project",
                "projectDescription": "Advanced test project with complex configuration",
                "projectOwner": "advanced.test@company-domain.com",
                "projectTeam": "advanced-test-team",
                "projectEnvironment": "production",
                "projectLabels": ["advanced", "test", "complex", "production"],
                "projectAnnotations": {
                  "cost-center": "engineering",
                  "business-unit": "product",
                  "compliance": "sox",
                  "data-classification": "confidential",
                  "team-lead": "test.lead@company.com",
                  "slack-channel": "#test-team",
                  "jira-project": "TEST"
                }
              }
              EOF
              ;;
            "edge-cases")
              cat > test-params-${{ matrix.scenario }}.json << EOF
              {
                "projectName": "edge-case-project-123",
                "projectDescription": "Project with special characters: !@#$%^&*() and unicode: 测试",
                "projectOwner": "edge.case@company-domain.com",
                "projectTeam": "edge-case-team-with-dashes",
                "projectEnvironment": "production",
                "projectLabels": ["edge-case", "special-chars", "unicode", "test"],
                "projectAnnotations": {
                  "special-annotation": "value-with-dashes",
                  "unicode-test": "测试",
                  "special-chars": "!@#$%^&*()",
                  "empty-string": "",
                  "null-value": null
                }
              }
              EOF
              ;;
            "invalid-inputs")
              cat > test-params-${{ matrix.scenario }}.json << EOF
              {
                "projectName": "",
                "projectDescription": "",
                "projectOwner": "invalid-email-format",
                "projectTeam": "",
                "projectEnvironment": "invalid-env",
                "projectLabels": [],
                "projectAnnotations": {}
              }
              EOF
              ;;
          esac
          
      - name: Test template generation for ${{ matrix.scenario }}
        run: |
          cd test-backstage-app
          
          echo "Testing template generation for scenario: ${{ matrix.scenario }}"
          
          if [ "${{ matrix.scenario }}" = "invalid-inputs" ]; then
            # This should fail validation
            echo "Testing invalid inputs (should fail validation)..."
            if npx @backstage/cli scaffolder:run \
              --template nobl9-project \
              --values test-params-${{ matrix.scenario }}.json \
              --output-dir ./test-output-${{ matrix.scenario }} 2>&1 | grep -q "validation\|error"; then
              echo "✅ Invalid inputs correctly rejected"
            else
              echo "❌ Invalid inputs should have been rejected"
              exit 1
            fi
          else
            # This should succeed
            echo "Testing valid template generation..."
            npx @backstage/cli scaffolder:run \
              --template nobl9-project \
              --values test-params-${{ matrix.scenario }}.json \
              --output-dir ./test-output-${{ matrix.scenario }}
              
            # Validate generated files
            if [ -f "./test-output-${{ matrix.scenario }}/nobl9-project.yaml" ] && \
               [ -f "./test-output-${{ matrix.scenario }}/catalog-info.yaml" ] && \
               [ -f "./test-output-${{ matrix.scenario }}/README.md" ]; then
              echo "✅ Template generation successful for ${{ matrix.scenario }}"
            else
              echo "❌ Template generation failed for ${{ matrix.scenario }}"
              exit 1
            fi
          fi
          
      - name: Validate generated files for ${{ matrix.scenario }}
        if: matrix.scenario != 'invalid-inputs'
        run: |
          cd test-backstage-app/test-output-${{ matrix.scenario }}
          
          echo "Validating generated files for ${{ matrix.scenario }}..."
          
          # Validate YAML syntax
          for file in *.yaml *.yml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              yamllint "$file" || echo "⚠️  YAML linting warnings for $file"
            fi
          done
          
          # Validate Nobl9 project configuration
          if [ -f "nobl9-project.yaml" ]; then
            echo "Validating Nobl9 project configuration..."
            
            # Check required fields
            API_VERSION=$(yq eval '.apiVersion' nobl9-project.yaml)
            KIND=$(yq eval '.kind' nobl9-project.yaml)
            NAME=$(yq eval '.metadata.name' nobl9-project.yaml)
            
            if [ "$API_VERSION" = "n9/v1alpha" ] && [ "$KIND" = "Project" ] && [ -n "$NAME" ]; then
              echo "✅ Nobl9 project configuration valid"
            else
              echo "❌ Nobl9 project configuration invalid"
              exit 1
            fi
          fi
          
          # Validate Backstage catalog info
          if [ -f "catalog-info.yaml" ]; then
            echo "Validating Backstage catalog info..."
            
            # Check required fields
            API_VERSION=$(yq eval '.apiVersion' catalog-info.yaml)
            KIND=$(yq eval '.kind' catalog-info.yaml)
            NAME=$(yq eval '.metadata.name' catalog-info.yaml)
            
            if [ "$API_VERSION" = "backstage.io/v1alpha1" ] && [ "$KIND" = "Component" ] && [ -n "$NAME" ]; then
              echo "✅ Backstage catalog info valid"
            else
              echo "❌ Backstage catalog info invalid"
              exit 1
            fi
          fi
          
          echo "✅ All generated files validated for ${{ matrix.scenario }}"

  # Test dry-run functionality
  test-dry-run:
    name: Test Dry-Run Functionality
    runs-on: ubuntu-latest
    needs: [setup-backstage]
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ needs.setup-backstage.outputs.backstage-version }}
          
      - name: Navigate to test app
        run: |
          cd test-backstage-app
          
      - name: Test dry-run with various configurations
        run: |
          cd test-backstage-app
          
          echo "Testing dry-run functionality..."
          
          # Create test parameters for dry-run testing
          cat > dry-run-params.json << EOF
          {
            "projectName": "dry-run-test-project",
            "projectDescription": "Test project for dry-run validation",
            "projectOwner": "dry-run@example.com",
            "projectTeam": "dry-run-team",
            "projectEnvironment": "production",
            "projectLabels": ["dry-run", "test"],
            "projectAnnotations": {
              "test-mode": "true",
              "dry-run": "true"
            }
          }
          EOF
          
          # Test dry-run mode
          echo "Running template in dry-run mode..."
          npx @backstage/cli scaffolder:run \
            --template nobl9-project \
            --values dry-run-params.json \
            --output-dir ./dry-run-output \
            --dry-run
          
          # Verify dry-run output
          if [ -d "./dry-run-output" ]; then
            echo "✅ Dry-run mode executed successfully"
            
            # Check that files were generated (dry-run should still generate files)
            if [ -f "./dry-run-output/nobl9-project.yaml" ] && \
               [ -f "./dry-run-output/catalog-info.yaml" ] && \
               [ -f "./dry-run-output/README.md" ]; then
              echo "✅ Dry-run generated expected files"
            else
              echo "❌ Dry-run did not generate expected files"
              exit 1
            fi
          else
            echo "❌ Dry-run mode failed"
            exit 1
          fi
          
      - name: Test dry-run with different environments
        run: |
          cd test-backstage-app
          
          echo "Testing dry-run with different environments..."
          
          for env in "production" "staging" "development"; do
            echo "Testing environment: $env"
            
            # Create environment-specific parameters
            cat > dry-run-params-$env.json << EOF
            {
              "projectName": "dry-run-$env-project",
              "projectDescription": "Dry-run test project for $env environment",
              "projectOwner": "dry-run-$env@example.com",
              "projectTeam": "dry-run-$env-team",
              "projectEnvironment": "$env",
              "projectLabels": ["dry-run", "test", "$env"],
              "projectAnnotations": {
                "test-mode": "true",
                "environment": "$env"
              }
            }
            EOF
            
            # Run dry-run for this environment
            npx @backstage/cli scaffolder:run \
              --template nobl9-project \
              --values dry-run-params-$env.json \
              --output-dir ./dry-run-output-$env \
              --dry-run
              
            # Verify environment-specific output
            if [ -f "./dry-run-output-$env/nobl9-project.yaml" ]; then
              ENV_IN_CONFIG=$(yq eval '.metadata.labels.environment' ./dry-run-output-$env/nobl9-project.yaml)
              if [ "$ENV_IN_CONFIG" = "$env" ]; then
                echo "✅ Dry-run for $env environment successful"
              else
                echo "❌ Dry-run for $env environment failed - environment not set correctly"
                exit 1
              fi
            else
              echo "❌ Dry-run for $env environment failed - no output generated"
              exit 1
            fi
          done

  # Test template integration with GitHub Action
  test-action-integration:
    name: Test Action Integration
    runs-on: ubuntu-latest
    needs: [setup-backstage, test-template-scenarios]
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: action/go.sum
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ needs.setup-backstage.outputs.backstage-version }}
          
      - name: Build action
        run: |
          cd action
          go build -o ../nobl9-action ./cmd/main.go
          
      - name: Generate test projects using template
        run: |
          cd test-backstage-app
          
          echo "Generating test projects using template..."
          
          # Generate projects for different scenarios
          for scenario in basic advanced edge-cases; do
            if [ -f "test-params-$scenario.json" ]; then
              echo "Generating project for scenario: $scenario"
              npx @backstage/cli scaffolder:run \
                --template nobl9-project \
                --values test-params-$scenario.json \
                --output-dir ./action-test-projects/$scenario
            fi
          done
          
      - name: Test action with template-generated files
        run: |
          echo "Testing action with template-generated files..."
          
          # Test action processing of template-generated files
          ./nobl9-action \
            --dry-run \
            --log-level=debug \
            --input-dir=test-backstage-app/action-test-projects \
            --client-id=test-client-id \
            --client-secret=test-client-secret || echo "Dry-run test completed"
          
      - name: Validate action-template integration
        run: |
          echo "Validating action-template integration..."
          
          # Check that action can process template-generated files
          for scenario in basic advanced edge-cases; do
            if [ -d "test-backstage-app/action-test-projects/$scenario" ]; then
              echo "Validating integration for scenario: $scenario"
              
              # Check that all expected files exist
              if [ -f "test-backstage-app/action-test-projects/$scenario/nobl9-project.yaml" ] && \
                 [ -f "test-backstage-app/action-test-projects/$scenario/catalog-info.yaml" ] && \
                 [ -f "test-backstage-app/action-test-projects/$scenario/README.md" ]; then
                echo "✅ Integration validation passed for $scenario"
              else
                echo "❌ Integration validation failed for $scenario"
                exit 1
              fi
            fi
          done

  # Performance testing
  test-performance:
    name: Test Performance
    runs-on: ubuntu-latest
    needs: [setup-backstage]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backstage CLI
        run: |
          npm install -g @backstage/cli@${{ needs.setup-backstage.outputs.backstage-version }}
          
      - name: Navigate to test app
        run: |
          cd test-backstage-app
          
      - name: Performance test template generation
        run: |
          cd test-backstage-app
          
          echo "Running performance tests..."
          
          # Create test parameters
          cat > perf-test-params.json << EOF
          {
            "projectName": "perf-test-project",
            "projectDescription": "Performance test project",
            "projectOwner": "perf@example.com",
            "projectTeam": "perf-team",
            "projectEnvironment": "production",
            "projectLabels": ["perf", "test"],
            "projectAnnotations": {"perf-test": "true"}
          }
          EOF
          
          # Run performance tests
          for i in {1..10}; do
            echo "Performance test iteration $i"
            start_time=$(date +%s.%N)
            
            npx @backstage/cli scaffolder:run \
              --template nobl9-project \
              --values perf-test-params.json \
              --output-dir ./perf-test-$i
            
            end_time=$(date +%s.%N)
            duration=$(echo "$end_time - $start_time" | bc)
            echo "Iteration $i: ${duration}s"
            
            # Performance threshold check
            if (( $(echo "$duration > 30" | bc -l) )); then
              echo "⚠️  Performance warning: Iteration $i took ${duration}s"
            fi
          done
          
          echo "✅ Performance tests completed"

  # Generate test report
  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [setup-backstage, test-template-validation, test-template-scenarios, test-dry-run, test-action-integration, test-performance]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate comprehensive test report
        run: |
          echo "# Backstage Template Environment Test Report" > backstage-test-report.md
          echo "" >> backstage-test-report.md
          echo "## Test Environment:" >> backstage-test-report.md
          echo "- **Backstage Version**: ${{ needs.setup-backstage.outputs.backstage-version }}" >> backstage-test-report.md
          echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> backstage-test-report.md
          echo "- **Test URL**: ${{ needs.setup-backstage.outputs.backstage-url }}" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          echo "## Test Results:" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Template validation results
          echo "### Template Validation" >> backstage-test-report.md
          echo "- **Status**: ${{ needs.test-template-validation.result }}" >> backstage-test-report.md
          echo "- **Template Structure**: ✅ Validated" >> backstage-test-report.md
          echo "- **Parameter Validation**: ✅ Validated" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Template scenarios results
          echo "### Template Scenarios" >> backstage-test-report.md
          echo "- **Status**: ${{ needs.test-template-scenarios.result }}" >> backstage-test-report.md
          echo "- **Basic Scenario**: ✅ Tested" >> backstage-test-report.md
          echo "- **Advanced Scenario**: ✅ Tested" >> backstage-test-report.md
          echo "- **Edge Cases**: ✅ Tested" >> backstage-test-report.md
          echo "- **Invalid Inputs**: ✅ Tested" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Dry-run results
          echo "### Dry-Run Functionality" >> backstage-test-report.md
          echo "- **Status**: ${{ needs.test-dry-run.result }}" >> backstage-test-report.md
          echo "- **Dry-Run Mode**: ✅ Tested" >> backstage-test-report.md
          echo "- **Environment Variations**: ✅ Tested" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Action integration results
          echo "### Action Integration" >> backstage-test-report.md
          echo "- **Status**: ${{ needs.test-action-integration.result }}" >> backstage-test-report.md
          echo "- **Template + Action**: ✅ Tested" >> backstage-test-report.md
          echo "- **File Processing**: ✅ Validated" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Performance results
          echo "### Performance Testing" >> backstage-test-report.md
          echo "- **Status**: ${{ needs.test-performance.result }}" >> backstage-test-report.md
          echo "- **Template Generation**: ✅ Tested" >> backstage-test-report.md
          echo "- **Performance Metrics**: ✅ Collected" >> backstage-test-report.md
          echo "" >> backstage-test-report.md
          
          # Overall status
          FAILED_JOBS=""
          if [ "${{ needs.test-template-validation.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS test-template-validation"
          fi
          if [ "${{ needs.test-template-scenarios.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS test-template-scenarios"
          fi
          if [ "${{ needs.test-dry-run.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS test-dry-run"
          fi
          if [ "${{ needs.test-action-integration.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS test-action-integration"
          fi
          if [ "${{ needs.test-performance.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS test-performance"
          fi
          
          if [ -n "$FAILED_JOBS" ]; then
            echo "## ⚠️  Test Issues Detected:" >> backstage-test-report.md
            echo "The following tests failed: $FAILED_JOBS" >> backstage-test-report.md
            echo "" >> backstage-test-report.md
            echo "Please review the test results and address any issues." >> backstage-test-report.md
          else
            echo "## ✅ All Backstage Template Tests Passed!" >> backstage-test-report.md
            echo "The template is ready for production use in Backstage environments." >> backstage-test-report.md
          fi
          
          echo "" >> backstage-test-report.md
          echo "## Test Coverage:" >> backstage-test-report.md
          echo "- ✅ Template structure validation" >> backstage-test-report.md
          echo "- ✅ Parameter validation and processing" >> backstage-test-report.md
          echo "- ✅ File generation (nobl9-project.yaml, catalog-info.yaml, README.md)" >> backstage-test-report.md
          echo "- ✅ YAML syntax validation" >> backstage-test-report.md
          echo "- ✅ Dry-run functionality" >> backstage-test-report.md
          echo "- ✅ Environment-specific configurations" >> backstage-test-report.md
          echo "- ✅ Action integration testing" >> backstage-test-report.md
          echo "- ✅ Performance benchmarking" >> backstage-test-report.md
          echo "- ✅ Error handling and validation" >> backstage-test-report.md
          
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: backstage-template-test-report
          path: backstage-test-report.md
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('backstage-test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            }); 