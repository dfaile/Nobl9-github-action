name: Nobl9 Project Sync Example

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
    paths:
      - '**/*.yaml'
      - '**/*.yml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform dry run only'
        required: false
        default: false
        type: boolean
      validate_only:
        description: 'Validate only, no deployment'
        required: false
        default: false
        type: boolean

jobs:
  sync-nobl9:
    name: Sync Nobl9 Projects
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better file detection
      
      - name: Sync Nobl9 Projects
        id: nobl9-sync
        uses: ./
        with:
          # Nobl9 API credentials (from secrets)
          client-id: ${{ secrets.NOBL9_CLIENT_ID }}
          client-secret: ${{ secrets.NOBL9_CLIENT_SECRET }}
          
          # Repository configuration
          repo-path: '.'
          file-pattern: '**/nobl9-project.yaml'
          
          # Processing options
          dry-run: ${{ github.event.inputs.dry_run || 'false' }}
          validate-only: ${{ github.event.inputs.validate_only || 'false' }}
          
          # Logging configuration
          log-level: 'info'
          log-format: 'json'
          
          # Force processing (use with caution)
          force: 'false'
      
      - name: Display results
        run: |
          echo "Processing completed!"
          echo "Files processed: ${{ steps.nobl9-sync.outputs.processed-files }}"
          echo "Projects created: ${{ steps.nobl9-sync.outputs.projects-created }}"
          echo "Projects updated: ${{ steps.nobl9-sync.outputs.projects-updated }}"
          echo "Role bindings created: ${{ steps.nobl9-sync.outputs.role-bindings-created }}"
          echo "Role bindings updated: ${{ steps.nobl9-sync.outputs.role-bindings-updated }}"
          echo "Users resolved: ${{ steps.nobl9-sync.outputs.users-resolved }}"
          echo "Errors: ${{ steps.nobl9-sync.outputs.errors }}"
          echo "Success: ${{ steps.nobl9-sync.outputs.success }}"
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Nobl9 Project Sync Results')
            );
            
            const commentBody = `## Nobl9 Project Sync Results
            
            **Status:** ${{ steps.nobl9-sync.outputs.success == 'true' ? '✅ Success' : '❌ Failed' }}
            
            **Processing Summary:**
            - Files processed: ${{ steps.nobl9-sync.outputs.processed-files }}
            - Projects created: ${{ steps.nobl9-sync.outputs.projects-created }}
            - Projects updated: ${{ steps.nobl9-sync.outputs.projects-updated }}
            - Role bindings created: ${{ steps.nobl9-sync.outputs.role-bindings-created }}
            - Role bindings updated: ${{ steps.nobl9-sync.outputs.role-bindings-updated }}
            - Users resolved: ${{ steps.nobl9-sync.outputs.users-resolved }}
            - Errors: ${{ steps.nobl9-sync.outputs.errors }}
            
            **Configuration:**
            - Dry run: ${{ github.event.inputs.dry_run || 'false' }}
            - Validate only: ${{ github.event.inputs.validate_only || 'false' }}
            
            ---
            *This comment was automatically generated by the Nobl9 Project Sync action.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } 